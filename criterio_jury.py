# -*- coding: utf-8 -*-
"""controleDigitalTrab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nOVNeTkUGZCEnVvNgx3L_K0JvMObIWcv
"""

def paresValores(k, grau_polinomio, polinomio):
    qnt_coeficientes = grau_polinomio + 1
    lista_de_dicionarios = []
    lista_coef_jota = []
    linha1 = polinomio
    linha2 = polinomio[::-1]

    for x in range(qnt_coeficientes):
        # Construindo o primeiro dicionário/K
        if x == 0:
            dic = {
                "chave1": linha1,
                "chave2": linha2
            }
            # Adicione o dicionário à lista
            lista_de_dicionarios.append(dic)
            # Calcular o termo jota para o primeiro dicionário/K
            try:
              coef_jota = linha2[0] / linha1[0]
            except ZeroDivisionError:
              print("Sistema Instável - Divisão por Zero!")
              break
              return lista_de_dicionarios, lista_coef_jota

            lista_coef_jota.append(abs(coef_jota))
        else:
            linha1_anterior = lista_de_dicionarios[x - 1]["chave1"]
            linha2_anterior = lista_de_dicionarios[x - 1]["chave2"]
            try:
              coef_jota = linha2_anterior[0] / linha1_anterior[0]
              linha_1 = [linha1_anterior[i] - linha2_anterior[i] * coef_jota for i in range(len(linha1_anterior))]
            except ZeroDivisionError:
              print("Sistema Instável - Divisão por Zero!")
              break
              return lista_de_dicionarios, lista_coef_jota

            if linha_1[-1] == 0:
                linha_1.pop()
            linha_2 = linha_1[::-1]

            linha_1_arredondada = [round(valor, 4) for valor in linha_1]
            linha_2_arredondada = [round(valor, 4) for valor in linha_2]
            try:
              coef_jota_atual = round(linha_2_arredondada[0] / linha_1_arredondada[0], 4)
              lista_coef_jota.append(abs(coef_jota_atual))
            except ZeroDivisionError:
              print("Sistema Instável - Divisão por Zero!")
              break
              return lista_de_dicionarios, lista_coef_jota

            linha1_anterior = linha_1_arredondada
            linha2_anterior = linha_2_arredondada

            dic = {
                "chave1": linha_1_arredondada,
                "chave2": linha_2_arredondada
            }
            lista_de_dicionarios.append(dic)

            cont_zero = 0
            for valores in linha_1_arredondada:
                if valores == 0:
                    cont_zero += 1
            if cont_zero == len(linha_1_arredondada):
                print(f"Sistema Instável - Tabela Zerada! \n")
                break


        ultimoJota = lista_coef_jota[-1]
        if ultimoJota > 1:
            print(f"Sistema Instável - |J| = {ultimoJota} > 1 \n")
            break
    else:
        print(f"Sistema Estável - |J| - {lista_coef_jota} < 1 \n")

    return lista_de_dicionarios, lista_coef_jota

# coletando dados
def coleta_dados(grau_polinomio):
  qnt_coeficientes = grau_polinomio + 1
  k = grau_polinomio
  cont = 0
  polinomio = []
  while qnt_coeficientes > cont:
    coeficientes = float(input("Informe os coeficientes: "))
    polinomio.append(coeficientes)
    cont += 1

  return polinomio,k

grau_polinomio = int(input("Qual o grau do polinômio? "))
polinomio,k = coleta_dados(grau_polinomio)
print(f"Os coeficientes são: {polinomio}, polinômio de grau: {k} \n")

# Desenhando a tabela
def ResultadoFinal(lista_de_dicionarios,lista_coef_jota):
  for i, (dic, coef_jota) in enumerate(zip(lista_de_dicionarios, lista_coef_jota)):
      print(f"K {i }:")
      print(f"Linha {2 * i + 1}: {dic['chave1']}")
      print(f"Linha {2 * i + 2}: {dic['chave2']}")
      print(f"Coeficiente J{i}: {coef_jota}\n")

# Implementando a função e exibindo a tabela
lista_de_dicionarios, lista_coef_jota = paresValores(k, grau_polinomio, polinomio)
ResultadoFinal(lista_de_dicionarios, lista_coef_jota)